(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{365:function(a,s,t){"use strict";t.r(s);var v=t(0),r=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"java-内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型"}},[a._v("#")]),a._v(" Java 内存模型")]),a._v(" "),t("p",[t("img",{attrs:{src:"/_images/pics/c9ad2bf4-5580-4018-bce4-1b9a71804d9c.png",alt:"image"}})]),a._v(" "),t("h3",{attrs:{id:"程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),t("p",[a._v("记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。")]),a._v(" "),t("h3",{attrs:{id:"java-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机栈"}},[a._v("#")]),a._v(" Java 虚拟机栈")]),a._v(" "),t("p",[a._v("每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息，从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/_images/pics/926c7438-c5e1-4b94-840a-dcb24ff1dafe.png",alt:"image"}})]),a._v(" "),t("p",[a._v("可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("java "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xss512M")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HackTheJava")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("该区域可能抛出以下异常：")]),a._v(" "),t("ul",[t("li",[a._v("当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；")]),a._v(" "),t("li",[a._v("栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。")])]),a._v(" "),t("h3",{attrs:{id:"本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),t("p",[a._v("本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。")]),a._v(" "),t("p",[a._v("本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/_images/pics/JNI-Java-Native-Interface.jpg",alt:"image"}})]),a._v(" "),t("h3",{attrs:{id:"堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),t("p",[a._v('所有对象都在这里分配内存，是垃圾收集的主要区域（"GC 堆"）。')]),a._v(" "),t("p",[a._v("现代的垃圾收集器基本都是采用分代收集算法，针对不同类型的对象采取不同的垃圾回收算法，可以将堆分成两块：")]),a._v(" "),t("ul",[t("li",[a._v("新生代（Young Generation）")]),a._v(" "),t("li",[a._v("老年代（Old Generation）")])]),a._v(" "),t("p",[a._v("新生代可以继续划分成以下三个空间：")]),a._v(" "),t("ul",[t("li",[a._v("Eden（伊甸园）")]),a._v(" "),t("li",[a._v("From Survivor（幸存者）")]),a._v(" "),t("li",[a._v("To Survivor")])]),a._v(" "),t("p",[a._v("堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。")]),a._v(" "),t("p",[a._v("可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("java "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xms1M")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xmx2M")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HackTheJava")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),t("p",[a._v("用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),a._v(" "),t("p",[a._v("和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。")]),a._v(" "),t("p",[a._v("对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。")]),a._v(" "),t("p",[a._v("JDK 1.7 之前，HotSpot 虚拟机把它当成永久代来进行垃圾回收。但是从 JDK 1.7 开始，已经把原本放在永久代的字符串常量池移到 Native Method 中。")]),a._v(" "),t("h3",{attrs:{id:"运行时常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[a._v("#")]),a._v(" 运行时常量池")]),a._v(" "),t("p",[a._v("运行时常量池是方法区的一部分。")]),a._v(" "),t("p",[a._v("Class 文件中的常量池（编译器生成的各种字面量和符号引用）会在类加载后被放入这个区域。")]),a._v(" "),t("p",[a._v("除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。")]),a._v(" "),t("h3",{attrs:{id:"直接内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接内存"}},[a._v("#")]),a._v(" 直接内存")]),a._v(" "),t("p",[a._v("在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。")]),a._v(" "),t("p",[a._v("这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。")])])}),[],!1,null,null,null);s.default=r.exports}}]);